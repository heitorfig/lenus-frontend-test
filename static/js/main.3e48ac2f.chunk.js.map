{"version":3,"sources":["components/Header.tsx","services/weightHistoryService.ts","components/CustomDatePicker.tsx","components/CurrentWeight.tsx","utils/date.ts","components/WeightLogItem.tsx","components/WeightHistory.tsx","components/WeightTracker.tsx","App.tsx","reportWebVitals.ts","overrides/ThemeOverride.ts","index.tsx"],"names":["Header","styled","props","Box","component","WeightHistoryService","storageKey","weightHistory","this","JSON","parse","localStorage","getItem","map","w","date","Date","setItem","stringify","removeItem","weight","Promise","resolve","id","Math","random","toString","substring","push","save","weightId","data","find","Object","assign","weightLog","filter","params","userId","sort","a","b","getTime","getAll","weightLogs","slice","currentWeight","CustomDatePicker","name","label","control","rules","disableFuture","defaultValue","maxDate","undefined","LocalizationProvider","dateAdapter","AdapterDateFns","shouldUnregister","render","field","onChange","value","DatePicker","renderInput","TextField","CurrentWeight","Stack","sx","mb","Typography","variant","fontWeight","color","formatDate","toLocaleDateString","day","month","year","WeightLogItem","onEditClick","onDeleteClick","Card","CardContent","direction","justifyContent","alignItems","spacing","CardActions","disableSpacing","IconButton","onClick","WeightHistory","WeightTracker","useState","weightLogDialogIsOpen","setWeightDialogIsOpen","selectedWeightLog","setSelectedWeightLog","setCurrentWeight","setWeightHistory","useForm","mode","register","setValue","handleSubmit","reset","isValid","formState","watch","useEffect","loadWeightLogs","weightHistoryService","then","closeDialog","handleCloseDialog","mt","Container","maxWidth","textAlign","Button","disableElevation","size","length","delete","Dialog","open","onClose","onSubmit","update","add","DialogTitle","DialogContent","required","type","min","inputProps","step","DialogActions","disabled","isDialogFormValid","App","minHeight","display","fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","palette","background","default","typography","fontFamily","shape","borderRadius","ReactDOM","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.3e48ac2f.chunk.js","sourcesContent":["import { styled } from '@mui/material/styles';\n\nimport Box from \"@mui/material/Box\";\n\nconst Header = styled((props) => (\n  <Box component=\"header\" {...props} />\n))`\n  position: -webkit-sticky;\n  position: sticky;\n  top: 0;\n  -webkit-transition: top 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  transition: top 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  z-index: 1100;\n  -webkit-backdrop-filter: blur(20px);\n  backdrop-filter: blur(20px);\n  box-shadow: inset 0px -1px 1px #eaeef3;\n  background-color: rgba(255,255,255,0.72);\n`;\n\nexport default Header;","import { WeightLog } from \"../interfaces/Weight\";\n\nclass WeightHistoryService {\n  private storageKey: string = \"weightHistory\";\n  private weightHistory: WeightLog[] = [];\n\n  constructor() {\n    this.weightHistory = JSON.parse(localStorage.getItem(this.storageKey) || \"[]\").map((w: WeightLog) => {\n      w.date = new Date(w.date);\n      return w;\n    });\n  }\n\n  save() {\n    localStorage.setItem(this.storageKey, JSON.stringify(this.weightHistory));\n  }\n\n  clear() {\n    this.weightHistory = [];\n    localStorage.removeItem(this.storageKey);\n  }\n\n  add(weight: WeightLog): Promise<WeightLog | null> {\n    return new Promise((resolve) => {\n      weight.id = Math.random().toString(36).substring(2, 9);\n      this.weightHistory.push(weight);\n      this.save();\n      resolve(weight);\n    });\n  }\n\n  update(weightId: string, data: WeightLog): Promise<WeightLog | null> {\n    return new Promise((resolve) => {\n      const weight = this.weightHistory.find((w) => w.id === weightId);\n      if (weight) {\n        Object.assign(weight, data);\n        this.save();\n        resolve(weight);\n      }\n      resolve(null);\n    });\n  }\n\n  delete(weightLog: WeightLog): Promise<boolean> {\n    return new Promise((resolve) => {\n      const weight = this.weightHistory.find((w) => w.id === weightLog.id);\n      if (weight) {\n        this.weightHistory = this.weightHistory.filter(\n          (w) => w.id !== weightLog.id\n        );\n        this.save();\n        resolve(true);\n      }\n      resolve(false);\n    });\n  }\n\n  getAll(params: { userId: string }): Promise<WeightLog[]> {\n    return new Promise((resolve) => {\n      resolve(this.weightHistory.filter((w) => w.userId === params.userId).sort((a, b) => b.date.getTime() - a.date.getTime()));\n    });\n  }\n\n  async getCurrentWeight(params: { userId: string }): Promise<WeightLog | null> {\n    const weightLogs = await this.getAll(params);\n    const [currentWeight] = weightLogs.slice(-1);\n    return currentWeight;\n  }\n}\n\nexport default new WeightHistoryService();\n","import AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\n\nimport { Controller } from \"react-hook-form\";\n\nimport DatePicker from \"@mui/lab/DatePicker\";\nimport TextField from \"@mui/material/TextField\";\n\nconst CustomDatePicker = ({\n  name,\n  label,\n  control,\n  rules,\n  disableFuture,\n  defaultValue,\n  ...props\n}: {\n  name: string;\n  control: any;\n  rules: any;\n  label: string;\n  disableFuture?: boolean;\n  defaultValue?: string | Date;\n}) => {\n  const maxDate = disableFuture ? new Date() : undefined;\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <Controller\n        name={name}\n        control={control}\n        rules={rules}\n        defaultValue={defaultValue}\n        shouldUnregister={true}\n        render={({ field: { onChange, value } }) => (\n          <DatePicker\n            maxDate={maxDate}\n            disableFuture={disableFuture}\n            onChange={onChange}\n            value={value}\n            label={label}\n            renderInput={(params: any) => <TextField {...params} {...props} />}\n          />\n        )}\n      />\n    </LocalizationProvider>\n  );\n};\n\nexport default CustomDatePicker;\n","import Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\n\nimport { WeightLog } from '../interfaces/Weight';\n\nconst CurrentWeight = ({ weightLog }: { weightLog: WeightLog | null | undefined }) => {\n  return (\n    <Stack sx={{ mb: 3 }} data-testid=\"current-weight\">\n      <Typography variant=\"subtitle1\" component=\"span\">\n        Your Current Weight\n      </Typography>\n      <Typography variant=\"h1\" component=\"div\" sx={{ fontWeight: 700 }} color=\"primary\">\n        {weightLog ? weightLog.weight : \"0.0\"}<small>kg</small>\n      </Typography>\n    </Stack>\n  );\n};\n\nexport default CurrentWeight;","export function formatDate(date: Date): string {\n  return date.toLocaleDateString('en-US', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n  });\n}","import Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\n\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\n\nimport IconButton from \"@mui/material/IconButton\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport { WeightLog } from \"../interfaces/Weight\";\nimport { formatDate } from '../utils/date';\n\nconst WeightLogItem = ({\n  weightLog,\n  onEditClick,\n  onDeleteClick,\n}: {\n  weightLog: WeightLog;\n  onEditClick?: any;\n  onDeleteClick?: any;\n}) => {\n  return (\n    <Card variant=\"outlined\" key={`weightLog_${weightLog.id}`} sx={{ mb: 2 }} data-testid=\"log-weight-card\">\n      <CardContent>\n        <Stack\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          <Typography\n            variant=\"subtitle1\"\n            color=\"text.secondary\"\n            component=\"div\"\n          >\n            {formatDate(weightLog.date)}\n          </Typography>\n          <Typography component=\"div\" variant=\"h4\" sx={{ fontWeight: 500 }}>\n            {weightLog.weight}kg\n          </Typography>\n\n          <CardActions disableSpacing>\n            {onEditClick && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"Edit Weight Log\"\n                onClick={() => onEditClick(weightLog)}\n              >\n                <EditIcon />\n              </IconButton>\n            )}\n            {onDeleteClick && (\n              <IconButton\n                color=\"error\"\n                aria-label=\"Delete Weight Log\"\n                onClick={() => onDeleteClick(weightLog)}\n              >\n                <DeleteIcon />\n              </IconButton>\n            )}\n          </CardActions>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default WeightLogItem;\n","import { WeightLog } from '../interfaces/Weight';\nimport WeightLogItem from \"./WeightLogItem\";\n\nconst WeightHistory = ({\n  weightHistory,\n  onEditClick,\n  onDeleteClick,\n}: {\n  weightHistory: WeightLog[];\n  onEditClick?: any;\n  onDeleteClick?: any;\n}) => {\n  return (\n    <div data-testid=\"weight-history\">\n      {weightHistory.map((weightLog: WeightLog) => {\n        return (\n          <WeightLogItem key={weightLog.id} weightLog={weightLog} onEditClick={onEditClick} onDeleteClick={onDeleteClick} />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default WeightHistory;\n","import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { WeightLog } from \"../interfaces/Weight\";\nimport weightHistoryService from \"../services/weightHistoryService\";\n\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Stack from \"@mui/material/Stack\";\n\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport AddIcon from \"@mui/icons-material/Add\";\n\nimport CustomDatePicker from \"./CustomDatePicker\";\nimport CurrentWeight from \"./CurrentWeight\";\nimport WeightHistory from \"./WeightHistory\";\n\nimport { formatDate } from \"../utils/date\";\n\nconst WeightTracker = () => {\n  const userId = \"#1\";\n\n  const [weightLogDialogIsOpen, setWeightDialogIsOpen] =\n    useState<boolean>(false);\n  const [selectedWeightLog, setSelectedWeightLog] =\n    useState<WeightLog | null>();\n\n  const [currentWeight, setCurrentWeight] = useState<WeightLog | null>();\n  const [weightHistory, setWeightHistory] = useState<WeightLog[]>([]);\n\n  const {\n    register,\n    control,\n    setValue,\n    handleSubmit,\n    reset,\n    formState: { isValid },\n    watch\n  } = useForm({\n    mode: \"onChange\"\n  });\n\n  useEffect(() => {\n    loadWeightLogs();\n  }, []);\n\n  const onSubmit = (data: WeightLog) => {\n    data.userId = userId;\n\n    let action;\n    if (selectedWeightLog && selectedWeightLog.id) {\n      action = weightHistoryService.update(selectedWeightLog.id, data);\n    } else {\n      action = weightHistoryService.add(data);\n    }\n\n    action.then(() => {\n      loadWeightLogs();\n    });\n\n    closeDialog();\n  };\n\n  const loadWeightLogs = () => {\n    weightHistoryService.getAll({ userId }).then((data) => {\n      setWeightHistory(data);\n      setCurrentWeight(data[0]);\n    });\n  };\n\n  const handleAddWeightLogClick = () => {\n    setWeightDialogIsOpen(true);\n    setSelectedWeightLog(null);\n\n    reset();\n  };\n\n  const handleEditWeightLogClick = (weightLog: WeightLog) => {\n    setWeightDialogIsOpen(true);\n    setSelectedWeightLog(weightLog);\n\n    setValue(\"weight\", weightLog.weight);\n    setValue(\"date\", weightLog.date);\n  };\n\n  const handleDeleteWeightLogClick = (weightLog: WeightLog) => {\n    weightHistoryService.delete(weightLog).then(() => {\n      loadWeightLogs();\n    });\n  };\n\n  const closeDialog = () => {\n    setWeightDialogIsOpen(false);\n    setSelectedWeightLog(null);\n\n    reset();\n  };\n\n  const handleCloseDialog = () => {\n    closeDialog();\n  };\n\n  const isDialogFormValid = () => {\n    const maxDate = new Date();\n    const date = new Date(watch(\"date\"));\n    return isValid && date <= maxDate;\n  };\n\n  return (\n    <>\n      <Box component=\"main\" sx={{ mt: 2, mb: 2 }}>\n        <Container maxWidth=\"sm\" sx={{ textAlign: \"center\" }}>\n          <CurrentWeight weightLog={currentWeight} />\n\n          <Button\n            variant=\"contained\"\n            disableElevation\n            size=\"large\"\n            sx={{ mb: 2 }}\n            onClick={handleAddWeightLogClick}\n            data-testid=\"log-weight-button\"\n          >\n            <AddIcon />{\" \"}\n            {weightHistory.length > 0\n              ? \"Log a Weight Change\"\n              : \"Log Your Weight\"}\n          </Button>\n\n          <WeightHistory\n            weightHistory={weightHistory}\n            onEditClick={handleEditWeightLogClick}\n            onDeleteClick={handleDeleteWeightLogClick}\n          />\n        </Container>\n      </Box>\n\n      <Dialog\n        open={weightLogDialogIsOpen}\n        onClose={handleCloseDialog}\n        data-testid=\"log-weight-dialog\"\n      >\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <DialogTitle data-testid=\"log-weight-dialog-title\">\n            {selectedWeightLog\n              ? `Update Weight Log from ${formatDate(selectedWeightLog.date)}`\n              : \"Logging Weight Change\"}\n          </DialogTitle>\n          <DialogContent>\n            <Stack sx={{ mt: 2 }} direction=\"row\" spacing={2}>\n              <CustomDatePicker\n                name=\"date\"\n                label=\"Date of Measurement\"\n                control={control}\n                rules={{ required: true }}\n                disableFuture\n                defaultValue={new Date()}\n                data-testid=\"log-weight-dialog-date-input\"\n              />\n              <TextField\n                type=\"number\"\n                label=\"Weight (kg)\"\n                {...register(\"weight\", { required: true, min: 0.01 })}\n                inputProps={{ step: \"0.01\" }}\n                data-testid=\"log-weight-dialog-weight-input\"\n              />\n            </Stack>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              color=\"error\"\n              onClick={handleCloseDialog}\n              data-testid=\"log-weight-dialog-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              data-testid=\"log-weight-dialog-submit\"\n              disabled={!isDialogFormValid()}\n            >\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  );\n};\n\nexport default WeightTracker;\n","import Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\n\nimport Header from \"./components/Header\";\nimport WeightTracker from \"./components/WeightTracker\";\n\nconst App = () => {\n  return (\n    <Box>\n      <Header>\n        <Container sx={{ minHeight: \"60px\", textAlign: \"center\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }} fixed>\n          <Typography variant=\"h5\" component=\"h1\" sx={{ fontWeight: 700 }} color=\"primary\">\n            Weight Tracker\n          </Typography>\n        </Container>\n      </Header>\n      <WeightTracker />\n    </Box>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    background: {\n      default: \"#F3F6F9\"\n    }\n  },\n  typography: {\n    fontFamily: \"Poppins, sans-serif\"\n  },\n  shape: {\n    borderRadius: 8\n  }\n});\n\nexport default theme;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { ThemeProvider } from '@mui/material/styles';\nimport theme from './overrides/ThemeOverride';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}